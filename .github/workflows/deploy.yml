name: CI and Deploy Lambdas

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      ENVIRONMENT: dev
      APPLICATION_NAME: my-batch-lambdas

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm ci

      # Step 4: Run linting
      - name: Run lint
        run: npm run lint

      # Step 5: Run tests
      - name: Run tests
        run: npm run test

      # Step 6: Build the project
      - name: Build project
        run: npm run build

      # Step 7: List contents of the dist directory for debugging
      - name: List dist directory
        run: ls -la src/lambdas/CEDGCR/dist

      # Step 8: Check if the dist directory exists and is not empty
      - name: Check dist directory
        run: |
          if [ ! -d "src/lambdas/CEDGCR/dist" ] || [ -z "$(ls -A src/lambdas/CEDGCR/dist)" ]; then
            echo "Error: 'src/lambdas/CEDGCR/dist' directory does not exist or is empty."
            exit 1
          fi

      # Step 9: Archive build output
      - name: Archive build artifacts
        run: zip -r lambda-build.zip src/lambdas/CEDGCR/dist

      # Step 10: Upload build artifacts
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: lambda-build
          path: lambda-build.zip

  deploy:
    runs-on: ubuntu-latest
    needs: build

    env:
      ENVIRONMENT: dev
      APPLICATION_NAME: my-batch-lambdas
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ap-south-1

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Download the artifact from the build job
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: lambda-build

      # Step 3: Extract the artifact
      - name: Extract artifact
        run: |
          if [ -f "lambda-build.zip" ]; then
            unzip lambda-build.zip -d dist
          else
            echo "Error: lambda-build.zip does not exist."
            exit 1
          fi

      # Step 4: Log the contents of the dist directory
      - name: List contents of dist directory
        run: ls -la dist

      # Step 5: Check if the expected Lambda ZIP file exists before deploying
      - name: Check for Lambda ZIP file
        run: |
          if [ ! -f "dist/lambdas.zip" ]; then
            echo "Error: 'dist/lambdas.zip' does not exist."
            exit 1
          else
            echo "'dist/lambdas.zip' exists."
          fi

      # Step 6: Deploy Lambda using CloudFormation
      - name: Deploy Lambda functions using CloudFormation
        run: |
          # Set up variables
          LAMBDA_CODE_ZIP_FILE_PATH="dist/lambdas.zip"
          PIPELINE_STACK_NAME="${{ env.APPLICATION_NAME }}-${{ env.ENVIRONMENT }}-pipeline-stack"

          # Upload the artifact to S3
          aws s3 cp $LAMBDA_CODE_ZIP_FILE_PATH s3://my-lambda-bucket/${{ env.APPLICATION_NAME }}-${{ env.ENVIRONMENT }}/lambda.zip

          # Deploy the CloudFormation stack with AWS CLI
          aws cloudformation deploy \
            --stack-name $PIPELINE_STACK_NAME \
            --template-file cloudformation.yml \
            --capabilities CAPABILITY_NAMED_IAM \
            --parameter-overrides \
            "ZippedLambdaS3Key=${{ env.APPLICATION_NAME }}-${{ env.ENVIRONMENT }}/lambda.zip" \
            "ArtifactsBucketName=my-lambda-bucket"
